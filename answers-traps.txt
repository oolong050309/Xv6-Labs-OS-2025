1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?

A : a0-a7 registers ; a2 register
2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
There is none. g(x) is inlined within f(x) and f(x) is further inlined into main()

3. At what address is the function printf located?
0x0000000000000616, main calls it with pc-relative addressing.

4. What value is in the register ra just after the jalr to printf in main?
jalr	1510(ra) # 0x616 <printf>
: 
1. pc += 4, pc -> ra
2. $ra + 1510 contiune
3. p/x 1510 = 0x5e6,  i r ra = 0x30
4. 0x5e6 + 0x30 = 0x616 -> printf 

$ ra = 0x38


5. 
  Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
 (1)What is the output? Here's an ASCII table that maps bytes to characters.
  	HE110 World

 
 (2)The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
 unsigned int i = 0x00646c72 ----> unsigned int i = 0x726c6400;
 
 No,because 57616 is shiliu jingzhi ,always be 110;
 
Here's a description of little- and big-endian and a more whimsical description.

6. In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
	
A random value depending on what codes there are right before the call.Because printf tried to read more arguments than supplied.
The second argument `3` is passed in a1, and the register for the third argument, a2, is not set to any specific value before the call, and contains whatever there is before the call.
